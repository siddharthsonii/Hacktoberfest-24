import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
        
        class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
        class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
        class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
